"use strict";(self.webpackChunkrts_docs_dev=self.webpackChunkrts_docs_dev||[]).push([["2343"],{78768:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>r,default:()=>d,toc:()=>h,metadata:()=>t,assets:()=>l,contentTitle:()=>a});var t=JSON.parse('{"id":"hpc/tutorial_intro_hpc/scheduler_fundamentals","title":"Scheduler Fundamentals","description":"Questions","source":"@site/docs/hpc/13_tutorial_intro_hpc/04_scheduler_fundamentals.mdx","sourceDirName":"hpc/13_tutorial_intro_hpc","slug":"/hpc/tutorial_intro_hpc/scheduler_fundamentals","permalink":"/pr-preview/pr-159/docs/hpc/tutorial_intro_hpc/scheduler_fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/NYU-RTS/rts-docs/blob/main/docs/hpc/13_tutorial_intro_hpc/04_scheduler_fundamentals.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"hpcSidebar","previous":{"title":"Exploring Remote Resources","permalink":"/pr-preview/pr-159/docs/hpc/tutorial_intro_hpc/exploring_remote_resources"},"next":{"title":"Environment Variables","permalink":"/pr-preview/pr-159/docs/hpc/tutorial_intro_hpc/environment_variables"}}'),o=s(74132),i=s(89447);let r={},a="Scheduler Fundamentals",l={},h=[{value:"Job Scheduler",id:"job-scheduler",level:2},{value:"Running a Batch Job",id:"running-a-batch-job",level:2},{value:"Customising a Job",id:"customising-a-job",level:2},{value:"Resource Requests",id:"resource-requests",level:2},{value:"Cancelling a Job",id:"cancelling-a-job",level:2},{value:"Other Types of Jobs",id:"other-types-of-jobs",level:2},{value:"Interactive jobs",id:"interactive-jobs",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"scheduler-fundamentals",children:"Scheduler Fundamentals"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Overview",type:"info",children:[(0,o.jsx)(n.p,{children:"Questions"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"What is a scheduler and why does a cluster need one?"}),"\n",(0,o.jsx)(n.li,{children:"How do I launch a program to run on a compute node in the cluster?"}),"\n",(0,o.jsx)(n.li,{children:"How do I capture the output of a program that is run on a node in the cluster?"}),"\n"]}),(0,o.jsx)(n.p,{children:"Objectives"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Submit a simple script to the cluster."}),"\n",(0,o.jsx)(n.li,{children:"Monitor the execution of jobs using command line tools."}),"\n",(0,o.jsx)(n.li,{children:"Inspect the output and error files of your jobs."}),"\n",(0,o.jsx)(n.li,{children:"Find the right place to put large datasets on the cluster."}),"\n"]})]}),"\n",(0,o.jsx)(n.h2,{id:"job-scheduler",children:"Job Scheduler"}),"\n",(0,o.jsxs)(n.p,{children:["An HPC system might have thousands of nodes and thousands of users. How do we decide who gets what and when? How do we ensure that a task is run with the resources it needs? This job is handled by a special piece of software called the ",(0,o.jsx)(n.em,{children:"scheduler"}),". On an HPC system, the scheduler manages which jobs run where and when."]}),"\n",(0,o.jsx)(n.p,{children:"The following illustration compares these tasks of a job scheduler to a waiter in a restaurant. If you can relate to an instance where you had to wait for a while in a queue to get in to a popular restaurant, then you may now understand why sometimes your job do not start instantly as in your laptop."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Job Scheduler to Waiter in Restaurant",src:s(62481).Z+"",width:"647",height:"392"})}),"\n",(0,o.jsx)(n.p,{children:"The scheduler used in this lesson is Slurm. Although Slurm is not used everywhere, running jobs is quite similar regardless of what software is being used. The exact syntax might change, but the concepts remain the same."}),"\n",(0,o.jsx)(n.h2,{id:"running-a-batch-job",children:"Running a Batch Job"}),"\n",(0,o.jsxs)(n.p,{children:["The most basic use of the scheduler is to run a command non-interactively. Any command (or series of commands) that you want to run on the cluster is called a ",(0,o.jsx)(n.code,{children:"job"}),", and the process of using a scheduler to run the job is called ",(0,o.jsx)(n.code,{children:"batch job submission"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"In this case, the job we want to run is a shell script \u2013 essentially a text file containing a list of UNIX commands to be executed in a sequential manner. Our shell script will have three parts:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["On the very first line, add ",(0,o.jsx)(n.code,{children:"#!/bin/bash"}),". The ",(0,o.jsx)(n.code,{children:"#!"})," (pronounced \u201Chash-bang\u201D or \u201Cshebang\u201D) tells the computer what program is meant to process the contents of this file. In this case, we are telling it that the commands that follow are written for the command-line shell (what we\u2019ve been doing everything in so far)."]}),"\n",(0,o.jsxs)(n.li,{children:["Anywhere below the first line, we\u2019ll add an ",(0,o.jsx)(n.code,{children:"echo"})," command with a friendly greeting. When run, the shell script will print whatever comes after ",(0,o.jsx)(n.code,{children:"echo"})," in the terminal.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"echo -n"})," will print everything that follows, ",(0,o.jsx)(n.em,{children:"without"})," ending the line by printing the new-line character."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["On the last line, we\u2019ll invoke the ",(0,o.jsx)(n.code,{children:"hostname"})," command, which will print the name of the machine the script is run on."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ nano example-job.sh\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\necho -n "This script is running on "\nhostname\n'})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)("summary",{children:[(0,o.jsx)(n.admonition,{title:"Creating Our Test Job",type:"info",children:(0,o.jsx)(n.p,{children:"Run the script. Does it execute on the cluster or just our login node?"})}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"[Click for Solution]"})})]}),(0,o.jsx)(n.admonition,{title:"Solution",type:"tip",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ bash example-job.sh\nThis script is running on log-1\n"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["This script ran on the login node, but we want to take advantage of the compute nodes: we need the scheduler to queue up ",(0,o.jsx)(n.code,{children:"example-job.sh"})," to run on a compute node."]}),"\n",(0,o.jsxs)(n.p,{children:["To submit this task to the scheduler, we use the ",(0,o.jsx)(n.code,{children:"sbatch"})," command. This creates a ",(0,o.jsx)(n.em,{children:"job"})," which will run the ",(0,o.jsx)(n.em,{children:"script"})," when ",(0,o.jsx)(n.em,{children:"dispatched"})," to a compute node which the queuing system has identified as being available to perform the work."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ sbatch example-job.sh\nSubmitted batch job 137860\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And that\u2019s all we need to do to submit a job. Our work is done \u2013 now the scheduler takes over and tries to run the job for us. While the job is waiting to run, it goes into a list of jobs called the ",(0,o.jsx)(n.code,{children:"queue"}),". To check on our job\u2019s status, we check the queue using the command ",(0,o.jsx)(n.code,{children:"squeue -u NetID"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ squeue -u NetID\nJOBID   PARTITION NAME      USER    ST  TIME  NODES  NODELIST(REASON)\n137860  normal    example-  usernm  R   0:02  1      c5-59\n"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Where\u2019s the Output?",type:"info",children:[(0,o.jsxs)(n.p,{children:["On the login node, this script printed output to the terminal \u2013 but now, when ",(0,o.jsx)(n.code,{children:"squeue"})," shows the job has finished, nothing was printed to the terminal."]}),(0,o.jsxs)(n.p,{children:["Cluster job output is typically redirected to a file in the directory you launched it from. Use ",(0,o.jsx)(n.code,{children:"ls"})," to find the file and ",(0,o.jsx)(n.code,{children:"cat"})," to read it."]})]}),"\n",(0,o.jsx)(n.h2,{id:"customising-a-job",children:"Customising a Job"}),"\n",(0,o.jsx)(n.p,{children:"The job we just ran used all of the scheduler\u2019s default options. In a real-world scenario, that\u2019s probably not what we want. The default options represent a reasonable minimum. Chances are, we will need more cores, more memory, more time, among other special considerations. To get access to these resources we must customize our job script."}),"\n",(0,o.jsxs)(n.p,{children:["Comments in UNIX shell scripts (denoted by ",(0,o.jsx)(n.code,{children:"#"}),") are typically ignored, but there are exceptions. For instance the special ",(0,o.jsx)(n.code,{children:"#!"})," comment at the beginning of scripts specifies what program should be used to run it (you\u2019ll typically see ",(0,o.jsx)(n.code,{children:"#!/usr/bin/env bash"}),"). Schedulers like Slurm also have a special comment used to denote special scheduler-specific options. Though these comments differ from scheduler to scheduler, Slurm\u2019s special comment is ",(0,o.jsx)(n.code,{children:"#SBATCH"}),". Anything following the ",(0,o.jsx)(n.code,{children:"#SBATCH"})," comment is interpreted as an instruction to the scheduler."]}),"\n",(0,o.jsxs)(n.p,{children:["Let\u2019s illustrate this by example. By default, a job\u2019s name is the name of the script, but the ",(0,o.jsx)(n.code,{children:"-J"})," option can be used to change the name of a job. Add an option to the script:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'[NetID@log-1 ~]$ cat example-job.sh\n#!/bin/bash\n#SBATCH -J hello-world\n\necho -n "This script is running on "\nhostname\n'})}),"\n",(0,o.jsx)(n.p,{children:"Submit the job and monitor its status:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ sbatch example-job.sh\n[NetID@log-1 ~]$ squeue -u NetID\nJOBID ACCOUNT     NAME     ST REASON   START_TIME TIME TIME_LEFT NODES CPUS\n38191 yourAccount hello-wo PD Priority N/A        0:00 1:00:00   1     1\n"})}),"\n",(0,o.jsx)(n.p,{children:"Fantastic, we\u2019ve successfully changed the name of our job!"}),"\n",(0,o.jsx)(n.h2,{id:"resource-requests",children:"Resource Requests"}),"\n",(0,o.jsx)(n.p,{children:"What about more important changes, such as the number of cores and memory for our jobs? One thing that is absolutely critical when working on an HPC system is specifying the resources required to run a job. This allows the scheduler to find the right time and place to schedule our job. If you do not specify requirements (such as the amount of time you need), you will likely be stuck with your site\u2019s default resources, which is probably not what you want."}),"\n",(0,o.jsx)(n.p,{children:"The following are several key resource requests:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--ntasks=<ntasks>"})," or ",(0,o.jsx)(n.code,{children:"-n <ntasks>"}),": How many CPU cores does your job need, in total?"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--time <days-hours:minutes:seconds>"})," or ",(0,o.jsx)(n.code,{children:"-t <days-hours:minutes:seconds>"}),": How much real-world time (walltime) will your job take to run? The ",(0,o.jsx)(n.code,{children:"<days>"})," part can be omitted."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--mem=<megabytes>"}),": How much memory on a node does your job need in megabytes? You can also specify gigabytes using by adding a little ",(0,o.jsx)(n.code,{children:"g"})," afterwards (example: ",(0,o.jsx)(n.code,{children:"--mem=5g"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--nodes=<nnodes>"})," or ",(0,o.jsx)(n.code,{children:"-N <nnodes>"}),": How many separate machines does your job need to run on? Note that if you set ntasks to a number greater than what one machine can offer, Slurm will set this value automatically."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Just requesting these resources does not make your job run faster, nor does it necessarily mean that you will consume all of these resources. It only means that these are made available to you. Your job may end up using less memory, or less time, or fewer nodes than you have requested, and it will still run."})}),"\n",(0,o.jsx)(n.p,{children:"It\u2019s best if your requests accurately reflect your job\u2019s requirements. We\u2019ll talk more about how to make sure that you\u2019re using resources effectively in a later episode of this lesson."}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.admonition,{title:"Submitting Resource Requests",type:"info",children:(0,o.jsxs)(n.p,{children:["Modify our ",(0,o.jsx)(n.code,{children:"hostname"})," script so that it runs for a minute, then submit a job for it on the cluster. ",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"[Click for Solution]"})]})})}),(0,o.jsxs)(n.admonition,{title:"Solution",type:"tip",children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"NetID@log-1 ~]$ cat example-job.sh\n"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n#SBATCH -t 00:01 # timeout in HH:MM\n\necho -n "This script is running on "\nsleep 20 # time in seconds\nhostname\n'})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ sbatch example-job.sh\n"})}),(0,o.jsx)(n.p,{children:"Why are the Slurm runtime and sleep time not identical?"})]})]}),"\n",(0,o.jsx)(n.p,{children:"Resource requests are typically binding. If you exceed them, your job will be killed. Let\u2019s use wall time as an example. We will request 1 minute of wall time, and attempt to run a job for two minutes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ cat example-job.sh\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n#SBATCH -J long_job\n#SBATCH -t 00:01 # timeout in HH:MM\n\necho "This script is running on ... "\nsleep 240 # time in seconds\nhostname\n'})}),"\n",(0,o.jsx)(n.p,{children:"Submit the job and wait for it to finish. Once it is has finished, check the log file."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ sbatch example-job.sh\n[NetID@log-1 ~]$ squeue -u NetID\ncat slurm-38193.out\nThis job is running on: c1-14\nslurmstepd: error: *** JOB 38193 ON gra533 CANCELLED AT 2017-07-02T16:35:48\nDUE TO TIME LIMIT ***\n"})}),"\n",(0,o.jsx)(n.p,{children:"Our job was killed for exceeding the amount of resources it requested. Although this appears harsh, this is actually a feature. Strict adherence to resource requests allows the scheduler to find the best possible place for your jobs. Even more importantly, it ensures that another user cannot use more resources than they\u2019ve been given. If another user messes up and accidentally attempts to use all of the cores or memory on a node, Slurm will either restrain their job to the requested resources or kill the job outright. Other jobs on the node will be unaffected. This means that one user cannot mess up the experience of others, the only jobs affected by a mistake in scheduling will be their own."}),"\n",(0,o.jsx)(n.h2,{id:"cancelling-a-job",children:"Cancelling a Job"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes we\u2019ll make a mistake and need to cancel a job. This can be done with the ",(0,o.jsx)(n.code,{children:"scancel"})," command. Let\u2019s submit a job and then cancel it using its job number (remember to change the walltime so that it runs long enough for you to cancel it before it is killed!)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ sbatch example-job.sh\n[NetID@log-1 ~]$ squeue -u NetID\nSubmitted batch job 38759\n\nJOBID ACCOUNT     NAME           ST REASON   TIME TIME_LEFT NODES CPUS\n38759 yourAccount example-job.sh PD Priority 0:00 1:00      1     1\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now cancel the job with its job number (printed in your terminal). A clean return of your command prompt indicates that the request to cancel the job was successful."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ scancel 38759\n# It might take a minute for the job to disappear from the queue...\n[NetID@log-1 ~]$ squeue -u NetID\nJOBID  USER  ACCOUNT  NAME  ST  REASON  START_TIME  TIME  TIME_LEFT  NODES CPUS\n"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Cancelling multiple jobs",type:"tip",children:[(0,o.jsxs)(n.p,{children:["We can also all of our jobs at once using the ",(0,o.jsx)(n.code,{children:"-u"})," option. This will delete all jobs for a specific user (in this case us). Note that you can only delete your own jobs."]}),(0,o.jsxs)(n.p,{children:["Try submitting multiple jobs and then cancelling them all with ",(0,o.jsx)(n.code,{children:"scancel -u NetID"}),"."]})]}),"\n",(0,o.jsx)(n.h2,{id:"other-types-of-jobs",children:"Other Types of Jobs"}),"\n",(0,o.jsx)(n.p,{children:"Up to this point, we\u2019ve focused on running jobs in batch mode. Slurm also provides the ability to start an interactive session."}),"\n",(0,o.jsxs)(n.p,{children:["There are very frequently tasks that need to be done interactively. Creating an entire job script might be overkill, but the amount of resources required is too much for a login node to handle. A good example of this might be building a genome index for alignment with a tool like ",(0,o.jsx)(n.a,{href:"https://daehwankimlab.github.io/hisat2/",children:"HISAT2"}),". Fortunately, we can run these types of tasks as a one-off with ",(0,o.jsx)(n.code,{children:"srun"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"srun"})," runs a single command on the cluster and then exits. Let\u2019s demonstrate this by running the ",(0,o.jsx)(n.code,{children:"hostname"})," command with ",(0,o.jsx)(n.code,{children:"srun"}),". (We can cancel an ",(0,o.jsx)(n.code,{children:"srun"})," job with ",(0,o.jsx)(n.code,{children:"Ctrl-c"}),".)"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:" srun hostname\ngra752\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"srun"})," accepts all of the same options as ",(0,o.jsx)(n.code,{children:"sbatch"}),". However, instead of specifying these in a script, these options are specified on the command-line when starting a job. To submit a job that uses 2 CPUs for instance, we could use the following command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'srun -n 2 echo "This job will use 2 CPUs."\nThis job will use 2 CPUs.\nThis job will use 2 CPUs.\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Typically, the resulting shell environment will be the same as that for ",(0,o.jsx)(n.code,{children:"sbatch"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"interactive-jobs",children:"Interactive jobs"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes, you will need a lot of resource for interactive use. Perhaps it\u2019s our first time running an analysis or we are attempting to debug something that went wrong with a previous job. Fortunately, Slurm makes it easy to start an interactive job with ",(0,o.jsx)(n.code,{children:"srun"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"srun --pty bash\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You should be presented with a bash prompt. Note that the prompt will likely change to reflect your new location, in this case the compute node we are logged on. You can also verify this with ",(0,o.jsx)(n.code,{children:"hostname"}),"."]}),"\n",(0,o.jsxs)(n.admonition,{title:"Creating remote graphics",type:"tip",children:[(0,o.jsxs)(n.p,{children:["To see graphical output inside your jobs, you need to use X11 forwarding. To connect with this feature enabled, use the ",(0,o.jsx)(n.code,{children:"-Y"})," option when you login with ",(0,o.jsx)(n.code,{children:"ssh"})," with the command ",(0,o.jsx)(n.code,{children:"ssh -Y username@host"}),"."]}),(0,o.jsxs)(n.p,{children:["To demonstrate what happens when you create a graphics window on the remote node, use ",(0,o.jsx)(n.code,{children:"gnuplot"})," as shown in the following example after you have created your ",(0,o.jsx)(n.code,{children:"ssh"})," session with X11 forwarding:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[NetID@log-1 ~]$ srun --x11 -c4 -t2:00:00 --mem=4000 --pty /bin/bash\n[NetID@cm034 ~]$ module load gnuplot/gcc/5.4.1\n[NetID@cm034 ~]$ gnuplot\ngnuplot> test\n"})}),(0,o.jsx)(n.p,{children:"If X11 forwarding is working you will see a test plot window open."}),(0,o.jsxs)(n.p,{children:["Greene has the ",(0,o.jsx)(n.a,{href:"https://github.com/hautreux/slurm-spank-x11",children:"slurm-spank-x11"})," plugin installed, so you can ensure X11 forwarding within interactive jobs by using the ",(0,o.jsx)(n.code,{children:"--x11"})," option for ",(0,o.jsx)(n.code,{children:"srun"})," with the command ",(0,o.jsx)(n.code,{children:"srun --x11 --pty bash"}),"."]})]}),"\n",(0,o.jsxs)(n.p,{children:["When you are done with the interactive job, type ",(0,o.jsx)(n.code,{children:"exit"})," to quit your session."]}),"\n",(0,o.jsx)(n.admonition,{title:"Key Points",type:"tip",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The scheduler handles how compute resources are shared between users."}),"\n",(0,o.jsx)(n.li,{children:"A job is just a shell script."}),"\n",(0,o.jsxs)(n.li,{children:["Request ",(0,o.jsx)(n.code,{children:"slightly"})," more resources than you will need."]}),"\n"]})})]})}function d(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},62481:function(e,n,s){s.d(n,{Z:()=>t});let t=s.p+"assets/images/restaurant_queue_manager-5ebba5113de89ca94dd5cbacef36ff1b.svg"},89447:function(e,n,s){s.d(n,{Z:()=>a,a:()=>r});var t=s(39546);let o={},i=t.createContext(o);function r(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);