"use strict";(self.webpackChunkrts_docs_dev=self.webpackChunkrts_docs_dev||[]).push([["3775"],{22142:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>r,toc:()=>c,default:()=>h,metadata:()=>s,assets:()=>l,contentTitle:()=>a});var s=JSON.parse('{"id":"hpc/tutorial_intro_shell_hpc/wildcards_pipes","title":"Wildcards and Pipes","description":"Questions","source":"@site/docs/hpc/12_tutorial_intro_shell_hpc/05_wildcards_pipes.mdx","sourceDirName":"hpc/12_tutorial_intro_shell_hpc","slug":"/hpc/tutorial_intro_shell_hpc/wildcards_pipes","permalink":"/pr-preview/pr-187/docs/hpc/tutorial_intro_shell_hpc/wildcards_pipes","draft":false,"unlisted":false,"editUrl":"https://github.com/NYU-RTS/rts-docs/blob/main/docs/hpc/12_tutorial_intro_shell_hpc/05_wildcards_pipes.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"hpcSidebar","previous":{"title":"Writing and Reading Files","permalink":"/pr-preview/pr-187/docs/hpc/tutorial_intro_shell_hpc/writing_reading_files"},"next":{"title":"Scripts, variables, and loops","permalink":"/pr-preview/pr-187/docs/hpc/tutorial_intro_shell_hpc/scripts_variables_loops"}}'),i=n(47259),o=n(55511);let r={},a="Wildcards and Pipes",l={},c=[{value:"Redirecting output",id:"redirecting-output",level:2},{value:"Chaining commands together",id:"chaining-commands-together",level:2}];function d(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"wildcards-and-pipes",children:"Wildcards and Pipes"})}),"\n",(0,i.jsxs)(t.admonition,{title:"Overview",type:"note",children:[(0,i.jsx)(t.p,{children:"Questions"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"How can I run a command on multiple files at once?"}),"\n",(0,i.jsx)(t.li,{children:"Is there an easy way of saving a command\u2019s output?"}),"\n"]}),(0,i.jsx)(t.p,{children:"Objectives"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Redirect a command\u2019s output to a file."}),"\n",(0,i.jsx)(t.li,{children:"Process a file instead of keyboard input using redirection."}),"\n",(0,i.jsx)(t.li,{children:"Construct command pipelines with two or more stages."}),"\n",(0,i.jsx)(t.li,{children:"Explain what usually happens if a program or pipeline isn\u2019t given any input to process."}),"\n"]})]}),"\n",(0,i.jsxs)(t.admonition,{title:"Required files",type:"warning",children:[(0,i.jsx)(t.p,{children:"If you didn\u2019t get them in the last lesson, make sure to download the example files used in the next few sections:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Using wget: wget ",(0,i.jsx)(t.a,{href:"https://nyuhpc.github.io/hpc-shell/files/bash-lesson.tar.gz",children:"https://nyuhpc.github.io/hpc-shell/files/bash-lesson.tar.gz"})]}),"\n",(0,i.jsxs)(t.li,{children:["Using a web browser: ",(0,i.jsx)(t.a,{href:"https://nyuhpc.github.io/hpc-shell/files/bash-lesson.tar.gz",children:"https://nyuhpc.github.io/hpc-shell/files/bash-lesson.tar.gz"})]}),"\n"]})]}),"\n",(0,i.jsxs)(t.p,{children:["Now that we know some of the basic UNIX commands, we are going to explore some more advanced features. The first of these features is the wildcard ",(0,i.jsx)(t.code,{children:"*"}),". In our examples before, we\u2019ve done things to files one at a time and otherwise had to specify things explicitly. The ",(0,i.jsx)(t.code,{children:"*"})," character lets us speed things up and do things across multiple files."]}),"\n",(0,i.jsxs)(t.p,{children:["Ever wanted to move, delete, or just do \u201Csomething\u201D to all files of a certain type in a directory? ",(0,i.jsx)(t.code,{children:"*"})," lets you do that, by taking the place of one or more characters in a piece of text. So ",(0,i.jsx)(t.code,{children:"*.txt"})," would be equivalent to all ",(0,i.jsx)(t.code,{children:".txt"})," files in a directory for instance. ",(0,i.jsx)(t.code,{children:"*"})," by itself means all files. Let\u2019s use our example data to see what I mean."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ tar xvf bash-lesson.tar.gz\nx dmel-all-r6.19.gtf\nx dmel_unique_protein_isoforms_fb_2016_01.tsv\nx gene_association.fb\nx SRR307023_1.fastq\nx SRR307023_2.fastq\nx SRR307024_1.fastq\nx SRR307024_2.fastq\nx SRR307025_1.fastq\nx SRR307025_2.fastq\nx SRR307026_1.fastq\nx SRR307026_2.fastq\nx SRR307027_1.fastq\nx SRR307027_2.fastq\nx SRR307028_1.fastq\nx SRR307028_2.fastq\nx SRR307029_1.fastq\nx SRR307029_2.fastq\nx SRR307030_1.fastq\nx SRR307030_2.fastq\n$ ls\nbash-lesson.tar.gz				            SRR307024_2.fastq				SRR307028_1.fastq\ndmel_unique_protein_isoforms_fb_2016_01.tsv	SRR307025_1.fastq				SRR307028_2.fastq\ndmel-all-r6.19.gtf				            SRR307025_2.fastq				SRR307029_1.fastq\ngene_association.fb				            SRR307026_1.fastq				SRR307029_2.fastq\nSRR307023_1.fastq				            SRR307026_2.fastq				SRR307030_1.fastq\nSRR307023_2.fastq				            SRR307027_1.fastq				SRR307030_2.fastq\nSRR307024_1.fastq				            SRR307027_2.fastq\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Now we have a whole bunch of example files in our directory. For this example we are going to learn a new command that tells us how long a file is: ",(0,i.jsx)(t.code,{children:"wc"}),". ",(0,i.jsx)(t.code,{children:"wc -l"})," file tells us the length of a file in lines."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ wc -l dmel-all-r6.19.gtf\n542048 dmel-all-r6.19.gtf\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Interesting, there are over 540000 lines in our ",(0,i.jsx)(t.code,{children:"dmel-all-r6.19.gtf"})," file. What if we wanted to run ",(0,i.jsx)(t.code,{children:"wc -l"})," on every ",(0,i.jsx)(t.code,{children:".fastq"})," file? This is where ",(0,i.jsx)(t.code,{children:"*"})," comes in really handy! ",(0,i.jsx)(t.code,{children:"*.fastq"})," would match every file ending in ",(0,i.jsx)(t.code,{children:".fastq"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ wc -l *.fastq\n20000 SRR307023_1.fastq\n20000 SRR307023_2.fastq\n20000 SRR307024_1.fastq\n20000 SRR307024_2.fastq\n20000 SRR307025_1.fastq\n20000 SRR307025_2.fastq\n20000 SRR307026_1.fastq\n20000 SRR307026_2.fastq\n20000 SRR307027_1.fastq\n20000 SRR307027_2.fastq\n20000 SRR307028_1.fastq\n20000 SRR307028_2.fastq\n20000 SRR307029_1.fastq\n20000 SRR307029_2.fastq\n20000 SRR307030_1.fastq\n20000 SRR307030_2.fastq\n320000 total\n"})}),"\n",(0,i.jsxs)(t.p,{children:["That was easy. What if we wanted to do the same command, except on every file in the directory? A nice trick to keep in mind is that ",(0,i.jsx)(t.code,{children:"*"})," by itself matches ",(0,i.jsx)(t.em,{children:"every"})," file."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ wc -l *\n    53037 bash-lesson.tar.gz\n   542048 dmel-all-r6.19.gtf\n    22129 dmel_unique_protein_isoforms_fb_2016_01.tsv\n   106290 gene_association.fb\n    20000 SRR307023_1.fastq\n    20000 SRR307023_2.fastq\n    20000 SRR307024_1.fastq\n    20000 SRR307024_2.fastq\n    20000 SRR307025_1.fastq\n    20000 SRR307025_2.fastq\n    20000 SRR307026_1.fastq\n    20000 SRR307026_2.fastq\n    20000 SRR307027_1.fastq\n    20000 SRR307027_2.fastq\n    20000 SRR307028_1.fastq\n    20000 SRR307028_2.fastq\n    20000 SRR307029_1.fastq\n    20000 SRR307029_2.fastq\n    20000 SRR307030_1.fastq\n    20000 SRR307030_2.fastq\n  1043504 total\n"})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(t.admonition,{title:"Multiple wildcards",type:"info",children:(0,i.jsxs)(t.p,{children:["You can even use multiple *s at a time. How would you run wc -l on every file with \u201Cfb\u201D in it?\n",(0,i.jsx)("br",{}),(0,i.jsx)(t.strong,{children:"[Click for Solution]"})]})})}),(0,i.jsxs)(t.admonition,{title:"Solution",type:"tip",children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"wc -l *fb*\n"})}),(0,i.jsxs)(t.p,{children:["i.e. ",(0,i.jsx)(t.em,{children:"anything or nothing"})," then ",(0,i.jsx)(t.code,{children:"fb"})," then ",(0,i.jsx)(t.em,{children:"anything or nothing"})]})]})]}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(t.admonition,{title:"Using other commands",type:"info",children:(0,i.jsxs)(t.p,{children:["Now let\u2019s try cleaning up our working directory a bit. Create a folder called \u201Cfastq\u201D and move all of our .fastq files there in one ",(0,i.jsx)(t.code,{children:"mv"})," command.\n",(0,i.jsx)("br",{}),(0,i.jsx)(t.strong,{children:"[Click for Solution]"})]})})}),(0,i.jsx)(t.admonition,{title:"Solution",type:"tip",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"mkdir fastq\nmv *.fastq fastq/\n"})})})]}),"\n",(0,i.jsx)(t.h2,{id:"redirecting-output",children:"Redirecting output"}),"\n",(0,i.jsx)(t.p,{children:"Each of the commands we\u2019ve used so far does only a very small amount of work. However, we can chain these small UNIX commands together to perform otherwise complicated actions!"}),"\n",(0,i.jsxs)(t.p,{children:["For our first foray into ",(0,i.jsx)(t.em,{children:"piping"}),", or redirecting output, we are going to use the ",(0,i.jsx)(t.code,{children:">"})," operator to write output to a file. When using ",(0,i.jsx)(t.code,{children:">"}),", whatever is on the left of the ",(0,i.jsx)(t.code,{children:">"})," is written to the filename you specify on the right of the arrow. The actual syntax looks like ",(0,i.jsx)(t.code,{children:"command > filename"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Let\u2019s try several basic usages of ",(0,i.jsx)(t.code,{children:">"}),". ",(0,i.jsx)(t.code,{children:"echo"})," simply prints back, or echoes, whatever you type after it."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'$ echo "this is a test"\nthis is a test\n$ echo "this is a test" > test.txt\n$ ls\nbash-lesson.tar.gz                           fastq\ndmel-all-r6.19.gtf                           gene_association.fb\ndmel_unique_protein_isoforms_fb_2016_01.tsv  test.txt\n$ cat test.txt\nthis is a test\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Awesome, let\u2019s try that with a more complicated command, like ",(0,i.jsx)(t.code,{children:"wc -l"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ wc -l * > word_counts.txt\nwc: fastq: Is a directory\n$ cat word_counts.txt\n    53037 bash-lesson.tar.gz\n   542048 dmel-all-r6.19.gtf\n    22129 dmel_unique_protein_isoforms_fb_2016_01.tsv\n   106290 gene_association.fb\n        1 test.txt\n   723505 total\n"})}),"\n",(0,i.jsx)(t.p,{children:"Notice how we still got some output to the console even though we \u201Cpiped\u201D the output to a file? Our expected output still went to the file, but how did the error message get skipped and not go to the file?"}),"\n",(0,i.jsxs)(t.p,{children:["This phenomena is an artefact of how UNIX systems are built. There are 3 input/output streams for every UNIX program you will run: ",(0,i.jsx)(t.code,{children:"stdin"}),", ",(0,i.jsx)(t.code,{children:"stdout"}),", and ",(0,i.jsx)(t.code,{children:"stderr"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Let\u2019s dissect these three streams of input/output in the command we just ran: ",(0,i.jsx)(t.code,{children:"wc -l * > word_counts.txt"})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["stdin is the input to a program. In the command we just ran, ",(0,i.jsx)(t.code,{children:"stdin"})," is represented by ",(0,i.jsx)(t.code,{children:"*"}),", which is simply every filename in our current directory."]}),"\n",(0,i.jsxs)(t.li,{children:["stdout contains the actual, expected output. In this case, ",(0,i.jsx)(t.code,{children:">"})," redirected ",(0,i.jsx)(t.code,{children:"stdout"})," to the file ",(0,i.jsx)(t.code,{children:"word_counts.txt"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["stderr typically contains error messages and other information that doesn\u2019t quite fit into the category of \u201Coutput\u201D. If we insist on redirecting both ",(0,i.jsx)(t.code,{children:"stdout"})," and ",(0,i.jsx)(t.code,{children:"stderr"})," to the same file we would use ",(0,i.jsx)(t.code,{children:"&>"})," instead of ",(0,i.jsx)(t.code,{children:">"}),". (We can redirect just ",(0,i.jsx)(t.code,{children:"stderr"})," using ",(0,i.jsx)(t.code,{children:"2>"}),".)"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Knowing what we know now, let\u2019s try re-running the command, and send all of the output (including the error message) to the same ",(0,i.jsx)(t.code,{children:"word_counts.txt"})," files as before."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ wc -l * &> word_counts.txt\n"})}),"\n",(0,i.jsx)(t.p,{children:"Notice how there was no output to the console that time. Let\u2019s check that the error message went to the file like we specified."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ cat word_counts.txt\n    53037 bash-lesson.tar.gz\n   542048 dmel-all-r6.19.gtf\n    22129 dmel_unique_protein_isoforms_fb_2016_01.tsv\nwc: fastq: Is a directory\n   106290 gene_association.fb\n        1 test.txt\n        7 word_counts.txt\n   723512 total\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Success! The ",(0,i.jsx)(t.code,{children:"wc: fastq: Is a directory"})," error message was written to the file. Also, note how the file was silently overwritten by directing output to the same place as before. Sometimes this is not the behaviour we want. How do we append (add) to a file instead of overwriting it?"]}),"\n",(0,i.jsxs)(t.p,{children:["Appending to a file is done the same was as redirecting output. However, instead of ",(0,i.jsx)(t.code,{children:">"}),", we will use ",(0,i.jsx)(t.code,{children:">>"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'$ echo "We want to add this sentence to the end of our file" >> word_counts.txt\n$ cat word_counts.txt\n  22129 dmel_unique_protein_isoforms_fb_2016_01.tsv\n 471308 Drosophila_melanogaster.BDGP5.77.gtf\n      0 fastq\n1304914 fb_synonym_fb_2016_01.tsv\n 106290 gene_association.fb\n      1 test.txt\n1904642 total\nWe want to add this sentence to the end of our file\n'})}),"\n",(0,i.jsx)(t.h2,{id:"chaining-commands-together",children:"Chaining commands together"}),"\n",(0,i.jsxs)(t.p,{children:["We now know how to redirect ",(0,i.jsx)(t.code,{children:"stdout"})," and ",(0,i.jsx)(t.code,{children:"stderr"})," to files. We can actually take this a step further and redirect output (",(0,i.jsx)(t.code,{children:"stdout"}),") from one command to serve as the input (stdin) for the next. To do this, we use the ",(0,i.jsx)(t.code,{children:"|"})," (pipe) operator."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"grep"})," is an extremely useful command. It finds things for us within files. Basic usage (there are a lot of options for more clever things, see the ",(0,i.jsx)(t.code,{children:"man"})," page) uses the syntax ",(0,i.jsx)(t.code,{children:"grep whatToFind fileToSearch"}),". Let\u2019s use ",(0,i.jsx)(t.code,{children:"grep"})," to find all of the entries pertaining to the ",(0,i.jsx)(t.code,{children:"Act5C"})," gene in Drosophila melanogaster."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ grep Act5C dmel-all-r6.19.gtf\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The output is nearly unintelligible since there is so much of it. Let\u2019s send the output of that ",(0,i.jsx)(t.code,{children:"grep"})," command to ",(0,i.jsx)(t.code,{children:"head"})," so we can just take a peek at the first line. The ",(0,i.jsx)(t.code,{children:"|"})," operator lets us send output from one command to the next:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'$ grep Act5C dmel-all-r6.19.gtf | head -n 1\nX	FlyBase	gene	5900861	5905399	.	+	.	gene_id "FBgn0000042"; gene_symbol "Act5C";\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Nice work, we sent the output of ",(0,i.jsx)(t.code,{children:"grep"})," to ",(0,i.jsx)(t.code,{children:"head"}),". Let\u2019s try counting the number of entries for Act5C with ",(0,i.jsx)(t.code,{children:"wc -l"}),". We can do the same trick to send ",(0,i.jsx)(t.code,{children:"grep"}),"\u2019s output to ",(0,i.jsx)(t.code,{children:"wc -l"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ grep Act5C dmel-all-r6.19.gtf | wc -l\n46\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"This is just the same as redirecting output to a file, then reading the number of lines from that file."})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsxs)("summary",{children:[(0,i.jsx)(t.admonition,{title:"Writing commands using pipes",type:"info",children:(0,i.jsx)(t.p,{children:"How many files are there in the \u201Cfastq\u201D directory we made earlier? (Use the shell to do this.)"})}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"[Click for Solution]"})})]}),(0,i.jsxs)(t.admonition,{title:"Solution",type:"tip",children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"ls fastq/ | wc -l\n"})}),(0,i.jsxs)(t.p,{children:["Output of ",(0,i.jsx)(t.code,{children:"ls"})," is one line per item, when chaining commands together like this, so counting lines gives the number of files."]})]})]}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)(t.admonition,{title:"Reading from compressed files",type:"info",children:[(0,i.jsxs)(t.p,{children:["Let\u2019s compress one of our files using ",(0,i.jsx)(t.code,{children:"gzip"}),"."]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ gzip gene_association.fb\n"})}),(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"zcat"})," acts like ",(0,i.jsx)(t.code,{children:"cat"}),", except that it can read information from ",(0,i.jsx)(t.code,{children:".gz"})," (compressed) files. Using ",(0,i.jsx)(t.code,{children:"zcat"}),", can you write a command to take a look at the top few lines of the ",(0,i.jsx)(t.code,{children:"gene_association.fb.gz"})," file (without decompressing the file itself)? ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.strong,{children:"[Click for Solution]"})]})]})}),(0,i.jsxs)(t.admonition,{title:"Solution",type:"tip",children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"zcat gene_association.fb.gz | head\n"})}),(0,i.jsx)(t.p,{children:"or for Mac:"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"zcat < gene_association.fb.gz | head\n"})}),(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"zcat"})," works a little differently on Macs.  You'll need to use ",(0,i.jsx)(t.code,{children:"<"})," to explicitly input the file for ",(0,i.jsx)(t.code,{children:"zcat"}),".",(0,i.jsx)("br",{}),"\nThe ",(0,i.jsx)(t.code,{children:"head"})," command without any options shows the first 10 lines of a file."]})]})]}),"\n",(0,i.jsx)(t.admonition,{title:"Key Points",type:"tip",children:(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"*"})," wildcard is used as a placeholder to match any text that follows a pattern."]}),"\n",(0,i.jsxs)(t.li,{children:["Redirect a command\u2019s output to a file with ",(0,i.jsx)(t.code,{children:">"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["Commands can be chained with ",(0,i.jsx)(t.code,{children:"|"})]}),"\n"]})})]})}function h(e={}){let{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},55511:function(e,t,n){n.d(t,{R:()=>r,x:()=>a});var s=n(96363);let i={},o=s.createContext(i);function r(e){let t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);