"use strict";(self.webpackChunkrts_docs_dev=self.webpackChunkrts_docs_dev||[]).push([["633"],{11378:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>i,default:()=>u,toc:()=>l,metadata:()=>o,assets:()=>d,contentTitle:()=>r});var o=JSON.parse('{"id":"hpc/ood/Dask","title":"Dask in Jupyter Notebook in OOD","description":"Dask is a Python library for parallel and distributed computing.","source":"@site/docs/hpc/09_ood/03_Dask.mdx","sourceDirName":"hpc/09_ood","slug":"/hpc/ood/Dask","permalink":"/pr-preview/pr-181/docs/hpc/ood/Dask","draft":false,"unlisted":false,"editUrl":"https://github.com/NYU-RTS/rts-docs/blob/main/docs/hpc/09_ood/03_Dask.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"hpcSidebar","previous":{"title":"Cell-ACDC in OOD","permalink":"/pr-preview/pr-181/docs/hpc/ood/CellACDC"},"next":{"title":"Desktop in OOD","permalink":"/pr-preview/pr-181/docs/hpc/ood/Desktop"}}'),s=n(74132),a=n(89447);let i={},r="Dask in Jupyter Notebook in OOD",d={},l=[{value:"Getting Started",id:"getting-started",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Dask with Jupyter Notebook running in OOD",id:"dask-with-jupyter-notebook-running-in-ood",level:2},{value:"Dask Example",id:"dask-example",level:2}];function c(e){let t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"dask-in-jupyter-notebook-in-ood",children:"Dask in Jupyter Notebook in OOD"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://docs.dask.org/en/stable/",children:"Dask"})," is a Python library for parallel and distributed computing."]}),"\n",(0,s.jsx)(t.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsxs)(t.p,{children:["You can run Dask in a Jupyter Notebook in OOD by going to the URL ",(0,s.jsx)(t.a,{href:"http://ood.hpc.nyu.edu",children:"ood.hpc.nyu.edu"})," in your browser and selecting ",(0,s.jsx)(t.code,{children:"DS-GA.1004 - Jupyter Dask"})," from the ",(0,s.jsx)(t.code,{children:"Interactive Apps"})," pull-down menu at the top of the page.  Once you've used it and other interactive apps they'll show up on your home screen under the ",(0,s.jsx)(t.code,{children:"Recently Used Apps"})," header."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["Be aware that when you start from ",(0,s.jsx)(t.code,{children:"Recently Used Apps"})," it will start with the same configuration that you used previously.  If you'd like to configure your Dask session differently, you'll need to select it from the menu."]})}),"\n",(0,s.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(t.p,{children:"You can select the Dask version, number of cores, amount of memory, root directory, number of hours, and optional Slurm options."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"OOD Dask Configuration",src:n(93336).Z+"",width:"1076",height:"1728"})}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsxs)(t.p,{children:["If you select to use ",(0,s.jsx)(t.code,{children:"/home"})," as your root directory be careful not to go over your quota.  You can find your current usage with the ",(0,s.jsx)(t.code,{children:"myquota"})," command.  Please see our ",(0,s.jsx)(t.a,{href:"/pr-preview/pr-181/docs/hpc/storage/intro_and_data_management",children:"Storage documentation"})," for details about your storage options."]})}),"\n",(0,s.jsx)(t.h2,{id:"dask-with-jupyter-notebook-running-in-ood",children:"Dask with Jupyter Notebook running in OOD"}),"\n",(0,s.jsxs)(t.p,{children:["After you hit the ",(0,s.jsx)(t.code,{children:"Launch"})," button you'll have to wait for the scheduler to find node(s) for you to run on:\n",(0,s.jsx)(t.img,{alt:"OOD Dask in queue",src:n(93882).Z+"",width:"1448",height:"714"})]}),"\n",(0,s.jsxs)(t.p,{children:["Then you'll have a short wait for Dask itself to start up.",(0,s.jsx)("br",{}),"\nOnce that happens you'll get one last page that will give you links to:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"open a terminal window on the compute node your Dask session is running on"}),"\n",(0,s.jsx)(t.li,{children:"go to the directory associated with your Session ID that stores output, config and other related files for your session"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Pre-launch Dask OOD",src:n(27267).Z+"",width:"1446",height:"716"})}),"\n",(0,s.jsxs)(t.p,{children:["Please click the ",(0,s.jsx)(t.code,{children:"Connect to Jupyter"})," button and a Jupyter window will open."]}),"\n",(0,s.jsx)(t.h2,{id:"dask-example",children:"Dask Example"}),"\n",(0,s.jsxs)(t.p,{children:["Start a new Jupyter notebook with 4 cores, 16GB memory, and set your root directory to ",(0,s.jsx)(t.code,{children:"/scratch"}),".  Enter the following code in the first cell and execute it by pressing the ",(0,s.jsx)(t.code,{children:"Shift"})," and ",(0,s.jsx)(t.code,{children:"Enter"})," keys at the same time."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import os\nimport pandas as pd\nimport numpy as np\nimport time\n\n# Create a directory for the large files\noutput_dir = \"tmp/large_data_files\"\nos.makedirs(output_dir, exist_ok=True)\n\nnum_files = 5  # Number of files to create\nrows_per_file = 10_000_000  # 10 million rows per file\nfor i in range(num_files):\n    data = {\n        'col1': np.random.randint(0, 100, size=rows_per_file),\n        'value': np.random.rand(rows_per_file) * 100\n    }\n    df = pd.DataFrame(data)\n    df.to_csv(os.path.join(output_dir, f'data_{i}.csv'), index=False)\nprint(f\"{num_files} large CSV files created in '{output_dir}'.\")\n\nimport dask.dataframe as dd\nfrom dask.distributed import Client\nimport time\nimport os\n\n# Start a Dask client for distributed processing (optional but recommended)\n# This allows you to monitor the computation with the Dask dashboard\nclient = Client(n_workers=4, threads_per_worker=2, memory_limit='16GB') # Adjust these as per your system resources\nprint(client)\n\n# Load multiple CSV files into a Dask DataFrame\n# Dask will automatically partition and parallelize the reading of these files\noutput_dir = '/scratch/rjy1/tmp/large_data_files'\ndask_df = dd.read_csv(os.path.join(output_dir, 'data_*.csv'))\n\n# Perform a calculation (e.g., calculate the mean of the 'value' column)\n# This operation will be parallelized across the available workers\nresult_dask = dask_df['value'].mean()\n\n# Trigger the computation and measure the time\nstart_time = time.time()\ncomputed_result_dask = result_dask.compute()\nend_time = time.time()\n\nprint(f\"Dask took {end_time - start_time} seconds to compute the mean across {num_files} files.\")\nprint(f\"Result (Dask): {computed_result_dask}\")\n\nimport pandas as pd\nimport time\nimport os\n\n# Perform the same calculation sequentially with Pandas\nstart_time_pandas = time.time()\ntotal_mean = 0\ntotal_count = 0\nfor i in range(num_files):\n    df = pd.read_csv(os.path.join(output_dir, f'data_{i}.csv'))\n    total_mean += df['value'].sum()\n    total_count += len(df)\ncomputed_result_pandas = total_mean / total_count\nend_time_pandas = time.time()\n\nprint(f\"Pandas took {end_time_pandas - start_time_pandas} seconds to compute the mean across {num_files} files.\")\nprint(f\"Result (Pandas): {computed_result_pandas}\")\n"})}),"\n",(0,s.jsx)(t.p,{children:"You should get output like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"5 large CSV files created in 'tmp/large_data_files'.\n<Client: 'tcp://127.0.0.1:45511' processes=4 threads=8, memory=59.60 GiB>\nDask took 3.448112726211548 seconds to compute the mean across 5 files.\nResult (Dask): 50.010815178612596\nPandas took 9.641847610473633 seconds to compute the mean across 5 files.\nResult (Pandas): 50.01081517861258\n"})})]})}function u(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},93336:function(e,t,n){n.d(t,{Z:()=>o});let o=n.p+"assets/images/ood_dask_config-2ddc8c99cf488af1082ac383820d7930.png"},93882:function(e,t,n){n.d(t,{Z:()=>o});let o=n.p+"assets/images/ood_dask_in_queue-89d4033a702345ce719bdd04363027df.png"},27267:function(e,t,n){n.d(t,{Z:()=>o});let o=n.p+"assets/images/ood_dask_prelaunch-0a63c0d398d4e40d47894fb7d1e75f31.png"},89447:function(e,t,n){n.d(t,{Z:()=>r,a:()=>i});var o=n(39546);let s={},a=o.createContext(s);function i(e){let t=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);