"use strict";(self.webpackChunkrts_docs_dev=self.webpackChunkrts_docs_dev||[]).push([["9464"],{19861:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>r,default:()=>p,toc:()=>d,metadata:()=>o,assets:()=>c,contentTitle:()=>a});var o=JSON.parse('{"id":"genai/onboarding/setup","title":"Setup","description":"Accessing your workspace","source":"@site/docs/genai/02_onboarding/02_setup.mdx","sourceDirName":"genai/02_onboarding","slug":"/genai/onboarding/setup","permalink":"/rts-docs-dev/pr-preview/pr-142/docs/genai/onboarding/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/NYU-ITS/rts-docs-dev/blob/main/docs/genai/02_onboarding/02_setup.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"genaiSidebar","previous":{"title":"Getting access","permalink":"/rts-docs-dev/pr-preview/pr-142/docs/genai/onboarding/intro"},"next":{"title":"Quickstart","permalink":"/rts-docs-dev/pr-preview/pr-142/docs/genai/onboarding/quickstart"}}'),s=n(74132),i=n(89447);let r={},a="Setup",c={},d=[{value:"Accessing your workspace",id:"accessing-your-workspace",level:2},{value:"Virtual Keys",id:"virtual-keys",level:2},{value:"API Keys",id:"api-keys",level:2}];function l(e){let t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"setup",children:"Setup"})}),"\n",(0,s.jsx)(t.h2,{id:"accessing-your-workspace",children:"Accessing your workspace"}),"\n",(0,s.jsxs)(t.p,{children:["Login to Portkey at ",(0,s.jsx)(t.a,{href:"https://app.portkey.ai/login",children:(0,s.jsx)(t.code,{children:"app.portkey.ai"})})," with the ",(0,s.jsx)(t.code,{children:"Single-sign-on"})," option using your NYU NetID. Once you're in, you'll be placed in the \"Shared Workspace\" by default. You can navigate to your workspace by selecting it from the workspace drop-down list from the top of the left sidebar."]}),"\n",(0,s.jsx)(t.h2,{id:"virtual-keys",children:"Virtual Keys"}),"\n",(0,s.jsx)(t.p,{children:'As workspace member you will be able to access virtual keys by clicking on the "Virtual Keys" item on the left sidebar in the "AI Gateway" section. You will have access to virtual keys added by the RTS team, but as an end-user, you will not have the ability to add them.'}),"\n",(0,s.jsx)(t.h2,{id:"api-keys",children:"API Keys"}),"\n",(0,s.jsx)(t.p,{children:'The first task we recommend that you perform is to create a "User" API key for yourself. Click on the "API Keys" item on the left sidebar. Once you hit the create button you\'d be able to choose the type (User/Service), optional items like config and metadata. In addition, you are free to choose as many or as few permissions you\'d provide the API key.'}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:['Having a "User" API key is a pre-requisite for using the ',(0,s.jsx)(t.a,{href:"https://app.portkey.ai/playground",children:"prompt playground"})," where you can collaboratively tune prompts and compare the responses from multiple LLMs."]})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"The only difference between user and service keys is that the logs with user key will have the NetID of the user as part of the metadata while the services will not. We recommend service keys to be used when you're creating end user applications like chatbots and stick to user keys otherwise."})}),"\n",(0,s.jsx)(t.p,{children:"You now have everything you need to send your first request to an LLM. The next section demonstrates an example."})]})}function p(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},89447:function(e,t,n){n.d(t,{Z:()=>a,a:()=>r});var o=n(39546);let s={},i=o.createContext(s);function r(e){let t=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);