"use strict";(self.webpackChunkrts_docs_dev=self.webpackChunkrts_docs_dev||[]).push([["3956"],{22236:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>_,default:()=>$,toc:()=>T,metadata:()=>r,assets:()=>k,contentTitle:()=>N});var r=JSON.parse('{"id":"hpc/tutorial_intro_shell_hpc/scripts_variables_loops","title":"Scripts, variables, and loops","description":"Questions","source":"@site/docs/hpc/13_tutorial_intro_shell_hpc/06_scripts_variables_loops.mdx","sourceDirName":"hpc/13_tutorial_intro_shell_hpc","slug":"/hpc/tutorial_intro_shell_hpc/scripts_variables_loops","permalink":"/rts-docs-dev/pr-preview/pr-122/docs/hpc/tutorial_intro_shell_hpc/scripts_variables_loops","draft":false,"unlisted":false,"editUrl":"https://github.com/NYU-ITS/rts-docs-dev/blob/main/docs/hpc/13_tutorial_intro_shell_hpc/06_scripts_variables_loops.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"hpcSidebar","previous":{"title":"Wildcards and Pipes","permalink":"/rts-docs-dev/pr-preview/pr-122/docs/hpc/tutorial_intro_shell_hpc/wildcards_pipes"},"next":{"title":"Introduction to High-Performance Computing","permalink":"/rts-docs-dev/pr-preview/pr-122/docs/hpc/tutorial_intro_hpc/intro_hpc"}}'),i=s(74132),t=s(89447);let o=(0,s(46354).Z)("smile",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M8 14s1.5 2 4 2 4-2 4-2",key:"1y1vjs"}],["line",{x1:"9",x2:"9.01",y1:"9",y2:"9",key:"yxxnd0"}],["line",{x1:"15",x2:"15.01",y1:"9",y2:"9",key:"1p4y9e"}]]);var l=s(39546),a=s(54461),c=s(24207),d=s(26936),h=s(13917),u=s(51667),p=s(67632),x=s(86145);function m(e){return l.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function f({value:e,tabValues:n}){return n.some(n=>n.value===e)}var j=s(17121);function w({className:e,block:n,selectedValue:s,selectValue:r,tabValues:t}){let o=[],{blockElementScrollPositionUntilNextRender:l}=(0,c.o5)(),d=e=>{let n=e.currentTarget,i=t[o.indexOf(n)].value;i!==s&&(l(n),r(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let s=o.indexOf(e.currentTarget)+1;n=o[s]??o[0];break}case"ArrowLeft":{let s=o.indexOf(e.currentTarget)-1;n=o[s]??o[o.length-1]}}n?.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},e),children:t.map(({value:e,label:n,attributes:r})=>(0,i.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{o.push(e)},onKeyDown:h,onClick:d,...r,className:(0,a.Z)("tabs__item","tabItem_GtEZ",r?.className,{"tabs__item--active":s===e}),children:n??e},e))})}function g({lazy:e,children:n,selectedValue:s}){let r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){let e=r.find(e=>e.props.value===s);return e?(0,l.cloneElement)(e,{className:(0,a.Z)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function b(e){let n=function(e){let{defaultValue:n,queryString:s=!1,groupId:r}=e,i=function(e){let{values:n,children:s}=e;return(0,l.useMemo)(()=>{let e=n??m(s).map(({props:{value:e,label:n,attributes:s,default:r}})=>({value:e,label:n,attributes:s,default:r})),r=(0,p.lx)(e,(e,n)=>e.value===n.value);if(r.length>0)throw Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,s])}(e),[t,o]=(0,l.useState)(()=>(function({defaultValue:e,tabValues:n}){if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!f({value:e,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let s=n.find(e=>e.default)??n[0];if(!s)throw Error("Unexpected error: 0 tabValues");return s.value})({defaultValue:n,tabValues:i})),[a,c]=function({queryString:e=!1,groupId:n}){let s=(0,d.k6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,u._X)(r),(0,l.useCallback)(e=>{if(!r)return;let n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})},[r,s])]}({queryString:s,groupId:r}),[j,w]=function({groupId:e}){let n=e?`docusaurus.tab.${e}`:null,[s,r]=(0,x.Nk)(n);return[s,(0,l.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),g=(()=>{let e=a??j;return f({value:e,tabValues:i})?e:null})();return(0,h.Z)(()=>{g&&o(g)},[g]),{selectedValue:t,selectValue:(0,l.useCallback)(e=>{if(!f({value:e,tabValues:i}))throw Error(`Can't select invalid tab value=${e}`);o(e),c(e),w(e)},[c,w,i]),tabValues:i}}(e);return(0,i.jsxs)("div",{className:(0,a.Z)("tabs-container","tabList_fjTJ"),children:[(0,i.jsx)(w,{...n,...e}),(0,i.jsx)(g,{...n,...e})]})}function y(e){let n=(0,j.Z)();return(0,i.jsx)(b,{...e,children:m(e.children)},String(n))}function v({children:e,hidden:n,className:s}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.Z)("tabItem_g7eQ",s),hidden:n,children:e})}let _={},N="Scripts, variables, and loops",k={},T=[{value:"Writing a Script",id:"writing-a-script",level:2},{value:"Permissions",id:"permissions",level:2},{value:"Changing Permissions",id:"changing-permissions",level:2},{value:"Executing Script",id:"executing-script",level:2},{value:"Comments",id:"comments",level:2},{value:"Shell variables",id:"shell-variables",level:2},{value:"Loops",id:"loops",level:2}];function I(e){let n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"scripts-variables-and-loops",children:"Scripts, variables, and loops"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Overview",type:"note",children:[(0,i.jsx)(n.p,{children:"Questions"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How do I turn a set of commands into a program?"}),"\n"]}),(0,i.jsx)(n.p,{children:"Objectives"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write a shell script"}),"\n",(0,i.jsx)(n.li,{children:"Understand and manipulate UNIX permissions"}),"\n",(0,i.jsx)(n.li,{children:"Understand shell variables and how to use them"}),"\n",(0,i.jsxs)(n.li,{children:["Write a simple ",(0,i.jsx)(n.code,{children:"for"})," loop."]}),"\n"]})]}),"\n",(0,i.jsx)(n.p,{children:"We now know a lot of UNIX commands! Wouldn\u2019t it be great if we could save certain commands so that we could run them later or not have to type them out again? As it turns out, this is straightforward to do. A \u201Cshell script\u201D is essentially a text file containing a list of UNIX commands to be executed in a sequential manner. These shell scripts can be run whenever we want, and are a great way to automate our work."}),"\n",(0,i.jsx)(n.h2,{id:"writing-a-script",children:"Writing a Script"}),"\n",(0,i.jsxs)(n.p,{children:["So how do we write a shell script, exactly? It turns out we can do this with a text editor. Start editing a file called ",(0,i.jsx)(n.code,{children:"demo.sh"})," (to recap, we can do this with ",(0,i.jsx)(n.code,{children:"nano demo.sh"}),"). The ",(0,i.jsx)(n.code,{children:".sh"})," is the standard file extension for shell scripts that most people use (you may also see ",(0,i.jsx)(n.code,{children:".bash"})," used)."]}),"\n",(0,i.jsx)(n.p,{children:"Our shell script will have two parts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["On the very first line, add ",(0,i.jsx)(n.code,{children:"#!/bin/bash"}),". The ",(0,i.jsx)(n.code,{children:"#!"})," (pronounced \u201Chash-bang\u201D) tells our computer what program to run our script with. In this case, we are telling it to run our script with our command-line shell (what we\u2019ve been doing everything in so far). If we wanted our script to be run with something else, like Perl, we could use ",(0,i.jsx)(n.code,{children:"#!/usr/bin/perl"})," instead."]}),"\n",(0,i.jsxs)(n.li,{children:["Now, anywhere below the first line, add ",(0,i.jsx)(n.code,{children:'echo "Our script worked!"'}),". When our script runs, ",(0,i.jsx)(n.code,{children:"echo"}),' will happily print out "Our script worked!".']}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Our file should now look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\necho "Our script worked!"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Ready to run our program? Let\u2019s try running it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ demo.sh \nbash: demo.sh: command not found...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Strangely enough, Bash can\u2019t find our script. As it turns out, Bash will only look in certain directories for scripts to run. To run anything else, we need to tell Bash exactly where to look. To run a script that we wrote ourselves, we need to specify the full path to the file, followed by the filename. We could do this one of two ways:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"with our absolute path /home/yourNetID/demo.sh"}),"\n",(0,i.jsx)(n.li,{children:"with the relative path ./demo.sh"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ./demo.sh\nbash: ./demo.sh: Permission denied\n"})}),"\n",(0,i.jsx)(n.p,{children:"There\u2019s one last thing we need to do. Before a file can be run, it needs 'permission' to run. We'll get a better understanding of Linux file permissions in the next section that will allow us to finally run our script."}),"\n",(0,i.jsx)(n.h2,{id:"permissions",children:"Permissions"}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s look at our file\u2019s permissions with ",(0,i.jsx)(n.code,{children:"ls -l"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ls -l\n-rw-rw-r-- 1 yourNetID users 12534006 Jan 16 18:50 bash-lesson.tar.gz\n-rw-rw-r-- 1 yourNetID users       40 Jan 16 19:41 demo.sh\n-rw-rw-r-- 1 yourNetID users 77426528 Jan 16 18:50 dmel-all-r6.19.gtf\n-rw-r--r-- 1 yourNetID users   721242 Jan 25  2016 dmel_unique_protein_is...\ndrwxrwxr-x 2 yourNetID users     4096 Jan 16 19:16 fastq\n-rw-r--r-- 1 yourNetID users  1830516 Jan 25  2016 gene_association.fb.gz\n-rw-rw-r-- 1 yourNetID users       15 Jan 16 19:17 test.txt\n-rw-rw-r-- 1 yourNetID users      245 Jan 16 19:24 word_counts.txt\n"})}),"\n",(0,i.jsx)(n.p,{children:"That\u2019s a huge amount of output: a full listing of everything in the directory. Let\u2019s see if we can understand what each field of a given row represents, working from the left to right."}),"\n",(0,i.jsx)(n.admonition,{title:"What each column of the output above means:",type:"info",children:(0,i.jsxs)(y,{children:[(0,i.jsxs)(v,{value:"column1",label:"File/Directory Permissions",children:[(0,i.jsx)(n.p,{children:"This column contains a block of subcolumns that define the permissions for a file or directory given in each row.  The permissions are shown for three user types to perform three actions each."}),(0,i.jsx)(n.p,{children:"The user types are:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["user (",(0,i.jsx)(n.code,{children:"u"}),"): This refers to your permissions for this file/directory."]}),"\n",(0,i.jsxs)(n.li,{children:["group (",(0,i.jsx)(n.code,{children:"g"}),"): This refers to the permissions for people in the same group as this file/directory.  You will see the group in the 4th column."]}),"\n",(0,i.jsxs)(n.li,{children:["other (",(0,i.jsx)(n.code,{children:"o"}),"): This refers to the permissions for all other users."]}),"\n"]}),(0,i.jsx)(n.p,{children:"The actions are:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["read (",(0,i.jsx)(n.code,{children:"r"}),"): This refers to the permission to read this file."]}),"\n",(0,i.jsxs)(n.li,{children:["write (",(0,i.jsx)(n.code,{children:"w"}),"): This refers to the permission to write to this file."]}),"\n",(0,i.jsxs)(n.li,{children:["execute (",(0,i.jsx)(n.code,{children:"x"}),"): This refers to the permission to execute this file."]}),"\n"]}),(0,i.jsx)(n.p,{children:"The following table show what each of the subcolumns refer to and their possible values:"}),(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"directory"}),(0,i.jsx)(n.th,{children:"user read"}),(0,i.jsx)(n.th,{children:"user write"}),(0,i.jsx)(n.th,{children:"user execute"}),(0,i.jsx)(n.th,{children:"group read"}),(0,i.jsx)(n.th,{children:"group write"}),(0,i.jsx)(n.th,{children:"group execute"}),(0,i.jsx)(n.th,{children:"other read"}),(0,i.jsx)(n.th,{children:"other write"}),(0,i.jsx)(n.th,{children:"other execute"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"d"})," or ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"r"})," or ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"w"})," or ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"x"})," or ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"r"})," or ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"w"})," or ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"x"})," or ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"r"})," or ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"w"})," or ",(0,i.jsx)(n.code,{children:"-"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"x"})," or ",(0,i.jsx)(n.code,{children:"-"})]})]})})]}),(0,i.jsxs)(n.p,{children:["If there is a ",(0,i.jsx)(n.code,{children:"-"})," in the directory column, the row refers to a file.  If it contains a ",(0,i.jsx)(n.code,{children:"d"}),", the row refers to a directory.  The following columns behave in a similar manner. If they contain a ",(0,i.jsx)(n.code,{children:"-"}),", the associated action is not allowed for the associated user type."]})]}),(0,i.jsx)(v,{value:"column2",label:"References",children:(0,i.jsx)(n.p,{children:"This counts the number of references (hard links) to the item (file, folder, symbolic link or \u201Cshortcut\u201D)."})}),(0,i.jsxs)(v,{value:"column3",label:"Owner",children:[(0,i.jsx)(n.p,{children:"This is the username of the user who owns the file."}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Their permissions are indicated in the first permissions block of three after the directory column"})})]}),(0,i.jsx)(v,{value:"column4",label:"Group",children:(0,i.jsx)(n.p,{children:"Each user has a primary group and is optionally a member of other groups. When a user creates a file, it is normally associated with the user\u2019s primary group. At NYU HPC, all users are in a group named \u2018users\u2019, so group permission has little meaning.\n::: tip\nOther members of this group have the permissions in the second block of three after the directory column\n:::"})}),(0,i.jsxs)(v,{value:"column5",label:"Size of item",children:[(0,i.jsx)(n.p,{children:"This is the number of bytes in a file, or the number of filesystem blocks occupied by the contents of a folder."}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["We can use the ",(0,i.jsx)(n.code,{children:"-h"})," option here to get a human-readable file size in megabytes, gigabytes, etc."]})})]}),(0,i.jsx)(v,{value:"column6",label:"Time last modified",children:(0,i.jsx)(n.p,{children:"This is the last time the file was modified."})}),(0,i.jsx)(v,{value:"column7",label:"Filename",children:(0,i.jsx)(n.p,{children:"This is the name of the file/directory."})})]})}),"\n",(0,i.jsx)(n.h2,{id:"changing-permissions",children:"Changing Permissions"}),"\n",(0,i.jsx)(n.p,{children:"As previously mentioned, in Unix a file has three basic permissions, each of which can be set for three types of user. Those three permission also have a numeric value:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Read permission (\u201Cr\u201D) - numeric value 4."}),"\n",(0,i.jsx)(n.li,{children:"Write permission (\u201Cw\u201D) - numeric value 2."}),"\n",(0,i.jsx)(n.li,{children:"Execute permission (\u201Cx\u201D) - numeric value 1."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["When applied to a directory, execute permission refers to whether the directory can be entered with ",(0,i.jsx)(n.code,{children:"cd"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["You'll need to use the ",(0,i.jsx)(n.code,{children:"chmod"})," command to modify permissions.  You grant permissions with ",(0,i.jsx)(n.code,{children:"chmod who+what file"})," and revoke them with ",(0,i.jsx)(n.code,{children:"chmod who-what file"}),". (Notice that the first has ",(0,i.jsx)(n.code,{children:"+"})," and the second ",(0,i.jsx)(n.code,{children:"-"}),"). Here, \u201Cwho\u201D is some combination of \u201Cu\u201D, \u201Cg\u201D, and \u201Co\u201D, and \u201Cwhat\u201D is some combination of \u201Cr\u201D, \u201Cw\u201D, and \u201Cx\u201D.  Leaving out the ",(0,i.jsx)(n.code,{children:"who"})," part of the command applies it to all user types."]}),"\n",(0,i.jsx)(n.p,{children:"So, to set execute permission we use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ chmod +x demo.sh\n$ ls -l\n-rw-rw-r-- 1 yourNetID users 12534006 Jan 16 18:50 bash-lesson.tar.gz\n-rwxrwxr-x 1 yourNetID users       40 Jan 16 19:41 demo.sh\n-rw-rw-r-- 1 yourNetID users 77426528 Jan 16 18:50 dmel-all-r6.19.gtf\n-rw-r--r-- 1 yourNetID users   721242 Jan 25  2016 dmel_unique_protein_is...\ndrwxrwxr-x 2 yourNetID users     4096 Jan 16 19:16 fastq\n-rw-r--r-- 1 yourNetID users  1830516 Jan 25  2016 gene_association.fb.gz\n-rw-rw-r-- 1 yourNetID users       15 Jan 16 19:17 test.txt\n-rw-rw-r-- 1 yourNetID users      245 Jan 16 19:24 word_counts.txt\n"})}),"\n",(0,i.jsx)(n.h2,{id:"executing-script",children:"Executing Script"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have executable permissions for that file, we can run it."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ./demo.sh\n"})}),"\n",(0,i.jsx)(n.p,{children:"Our script worked!  Fantastic, we\u2019ve written our first program!"}),"\n",(0,i.jsx)(n.h2,{id:"comments",children:"Comments"}),"\n",(0,i.jsxs)(n.p,{children:["Before we go any further, let\u2019s learn how to take notes inside our program using comments. A comment is indicated by the ",(0,i.jsx)(n.code,{children:"#"})," character, followed by whatever we want. Comments do not get run. Let\u2019s try out some comments in the console, then add one to our script!"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# This won't show anything.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now let's try adding this to our script with nano. Edit your script to look something like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# This is a comment... they are nice for making notes!\necho "Our script worked!"\n'})}),"\n",(0,i.jsx)(n.p,{children:"When we run our script, the output should be unchanged from before!"}),"\n",(0,i.jsx)(n.h2,{id:"shell-variables",children:"Shell variables"}),"\n",(0,i.jsx)(n.p,{children:"One important concept that we\u2019ll need to cover are shell variables. Variables are a great way of saving information under a name you can access later. In programming languages like Python and R, variables can store pretty much anything you can think of. In the shell, they usually just store text. The best way to understand how they work is to see them in action."}),"\n",(0,i.jsxs)(n.p,{children:["To set a variable, simply type in a name containing only letters, numbers, and underscores, followed by an ",(0,i.jsx)(n.code,{children:"="})," and whatever you want to put in the variable. Shell variable names are often uppercase by convention (but do not have to be)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'$ VAR="This is our variable"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["To use a variable, prefix its name with a ",(0,i.jsx)(n.code,{children:"$"})," sign. Note that if we want to simply check what a variable is, we should use ",(0,i.jsx)(n.code,{children:"echo"})," (or else the shell will try to run the contents of a variable)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ echo $VAR\nThis is our variable\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s try setting a variable in our script and then recalling its value as part of a command. We\u2019re going to make it so our script runs ",(0,i.jsx)(n.code,{children:"wc -l"})," on whichever file we specify with ",(0,i.jsx)(n.code,{children:"FILE"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Our script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n\n# set our variable to the name of our GTF file\nFILE=dmel-all-r6.19.gtf\n\n# call wc -l on our file\nwc -l $FILE\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ./demo.sh\n542048 dmel-all-r6.19.gtf\n"})}),"\n",(0,i.jsxs)(n.p,{children:["What if we wanted to do our little ",(0,i.jsx)(n.code,{children:"wc -l"})," script on other files without having to change ",(0,i.jsx)(n.code,{children:"$FILE"})," every time we want to use it? There is actually a special shell variable we can use in scripts that allows us to use arguments in our scripts (arguments are extra information that we can pass to our script, like the ",(0,i.jsx)(n.code,{children:"-l"})," in ",(0,i.jsx)(n.code,{children:"wc -l"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["To use the first argument to a script, use ",(0,i.jsx)(n.code,{children:"$1"})," (the second argument is ",(0,i.jsx)(n.code,{children:"$2"}),", and so on). Let\u2019s change our script to run ",(0,i.jsx)(n.code,{children:"wc -l"})," on ",(0,i.jsx)(n.code,{children:"$1"})," instead of ",(0,i.jsx)(n.code,{children:"$FILE"}),". Note that we can also pass all of the arguments using ",(0,i.jsx)(n.code,{children:"$@"})," (not going to use it in this lesson, but it\u2019s something to be aware of)."]}),"\n",(0,i.jsx)(n.p,{children:"Our script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n\n# call wc -l on our first argument\nwc -l $1\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ./demo.sh dmel_unique_protein_isoforms_fb_2016_01.tsv\n22129 dmel_unique_protein_isoforms_fb_2016_01.tsv\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Nice! One thing to be aware of when using variables: they are all treated as pure text. How do we save the output of an actual command like ",(0,i.jsx)(n.code,{children:"ls -l"}),"?"]}),"\n",(0,i.jsx)(n.p,{children:"First, a demonstration of what doesn\u2019t work:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ TEST=ls -l\n-bash: -l: command not found\n"})}),"\n",(0,i.jsxs)(n.p,{children:["What does work? We need to surround any command with ",(0,i.jsx)(n.code,{children:"$(command)"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ TEST=$(ls -l)\n$ echo $TEST\ntotal 90372 -rw-rw-r-- 1 jeff jeff 12534006 Jan 16 18:50 bash-lesson.tar.gz -rwxrwxr-x. 1 jeff jeff 40 Jan 1619:41 demo.sh -rw-rw-r-- 1 jeff jeff 77426528 Jan 16 18:50 dmel-all-r6.19.gtf -rw-r--r-- 1 jeff jeff 721242 Jan 25 2016 dmel_unique_protein_isoforms_fb_2016_01.tsv drwxrwxr-x. 2 jeff jeff 4096 Jan 16 19:16 fastq -rw-r--r-- 1 jeff jeff 1830516 Jan 25 2016 gene_association.fb.gz -rw-rw-r-- 1 jeff jeff 15 Jan 16 19:17 test.txt -rw-rw-r-- 1 jeff jeff 245 Jan 16 19:24 word_counts.txt\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Everything got printed on the same line. This is a feature, not a bug, as it allows us to use $(commands) inside lines of script without triggering line breaks (which would end our line of code and execute it prematurely)."})}),"\n",(0,i.jsx)(n.h2,{id:"loops",children:"Loops"}),"\n",(0,i.jsx)(n.p,{children:"To end our lesson on scripts, we are going to learn how to write a for-loop to execute a lot of commands at once. This will let us do the same string of commands on every file in a directory (or other stuff of that nature)."}),"\n",(0,i.jsx)(n.p,{children:"for-loops generally have the following syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n\nfor VAR in first second third\ndo\n    echo $VAR\ndone\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When a for-loop gets run, the loop will run once for everything following the word ",(0,i.jsx)(n.code,{children:"in"}),". In each iteration, the variable ",(0,i.jsx)(n.code,{children:"$VAR"})," is set to a particular value for that iteration. In this case it will be set to ",(0,i.jsx)(n.code,{children:"first"})," during the first iteration, ",(0,i.jsx)(n.code,{children:"second"})," on the second, and so on. During each iteration, the code between ",(0,i.jsx)(n.code,{children:"do"})," and ",(0,i.jsx)(n.code,{children:"done"})," is performed."]}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s run the script we just wrote (I saved mine as ",(0,i.jsx)(n.code,{children:"loop.sh"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ chmod +x loop.sh\n$ ./loop.sh\nfirst\nsecond\nthird\n"})}),"\n",(0,i.jsxs)(n.p,{children:["What if we wanted to loop over a shell variable, such as every file in the current directory? Shell variables work perfectly in for-loops. In this example, we\u2019ll save the result of ",(0,i.jsx)(n.code,{children:"ls"})," and loop over each file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n\nFILES=$(ls)\nfor VAR in $FILES\ndo\n        echo $VAR\ndone\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ./loop.sh\nbash-lesson.tar.gz\ndemo.sh\ndmel_unique_protein_isoforms_fb_2016_01.tsv\ndmel-all-r6.19.gtf\nfastq\ngene_association.fb.gz\nloop.sh\ntest.txt\nword_counts.txt\n"})}),"\n",(0,i.jsxs)(n.p,{children:["There\u2019s a shortcut to run on all files of a particular type, say all ",(0,i.jsx)(n.code,{children:".gz"})," files:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n\nfor VAR in *.gz\ndo\n    echo $VAR\ndone\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"bash-lesson.tar.gz\ngene_association.fb.gz\n"})}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)(n.admonition,{title:"Writing our own scripts and loops",type:"info",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cd"})," to our ",(0,i.jsx)(n.code,{children:"fastq"})," directory from earlier and write a loop to print off the name and top 4 lines of every fastq file in that directory."]}),(0,i.jsxs)(n.p,{children:["Is there a way to only run the loop on fastq files ending in _1.fastq? ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"[Click for Solution]"})]})]})}),(0,i.jsxs)(n.admonition,{title:"Solution",type:"tip",children:[(0,i.jsxs)(n.p,{children:["Create the following script in a file called ",(0,i.jsx)(n.code,{children:"head_all.sh"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n\nfor FILE in *.fasatq\ndo\n    echo $FILE\n    head -n 4 $FILE\ndone\n"})}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"for"})," line could be modified to be ",(0,i.jsx)(n.code,{children:"for FILE in *_1.fastq"})," to achieve the second aim."]})]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)(n.admonition,{title:"Concatenating variables",type:"info",children:[(0,i.jsxs)(n.p,{children:["Concatenating (i.e. mashing together) variables is quite easy to do. Add whatever you want to concatenate to the beginning or end of the shell variable after enclosing it in ",(0,i.jsx)(n.code,{children:"{}"})," characters."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ FILE=stuff.txt\n$ echo ${FILE}.example\nstuff.txt.example\n"})}),(0,i.jsxs)(n.p,{children:["Can you write a script that prints off the name of every file in a directory with ",(0,i.jsx)(n.code,{children:".processed"})," added to it? ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"[Click for Solution]"})]})]})}),(0,i.jsxs)(n.admonition,{title:"Solution",type:"tip",children:[(0,i.jsxs)(n.p,{children:["Create the following script in a file called ",(0,i.jsx)(n.code,{children:"process.sh"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n\nfor FILE in *\ndo\n    echo ${FILE}.processed\ndone\n"})}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This will also print directories appended with ",(0,i.jsx)(n.code,{children:".processed"}),"."]})}),(0,i.jsxs)(n.p,{children:["To truly only get files and not directories, we need to modify this to use the ",(0,i.jsx)(n.code,{children:"find"})," command to give us only files in the current directory:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n\nfor FILE in $(find . -maxdepth 1 -type f)\ndo\n    echo ${FILE}.processed\ndone\n"})}),(0,i.jsx)(n.p,{children:"but this will have the side effect of listing hidden files too.  We can fix this by making a small change to the find command:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\nfor FILE in $(find . -maxdepth 1 -type f ! -name ".*")\ndo\n    echo ${FILE}.processed\ndone\n'})}),(0,i.jsxs)(n.p,{children:["We've added ",(0,i.jsx)(n.code,{children:'! -name ".*"'})," to the ",(0,i.jsx)(n.code,{children:"find"})," command.  It means ",(0,i.jsx)(n.code,{children:"not"})," (",(0,i.jsx)(n.code,{children:"!"}),") a name that starts with ",(0,i.jsx)(n.code,{children:"."}),".",(0,i.jsx)("br",{}),"\nAs you can see, programming is often iterative in more ways than one. ",(0,i.jsx)(o,{})]})]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)(n.admonition,{title:"Special permissions",type:"info",children:[(0,i.jsxs)(n.p,{children:["What if we want to give different sets of users different permissions. ",(0,i.jsx)(n.code,{children:"chmod"})," actually accepts special numeric codes instead of stuff like ",(0,i.jsx)(n.code,{children:"chmod +x"}),", as we mentioned above. Again, the numeric codes are as follows: read = 4, write = 2, execute = 1. For each user we will assign permissions based on the sum of these permissions (must be between 7 and 0)."]}),(0,i.jsx)(n.p,{children:"Let\u2019s make an example file and give everyone permission to do everything with it."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ touch example\n$ ls -l example\n-rw-r--r--  1 yourNetID  users  0 May 30 14:50 example\n$ chmod 777 example\n$ ls -l example\n-rwxrwxrwx  1 yourNetID  users  0 May 30 14:50 example\n"})}),(0,i.jsxs)(n.p,{children:["How might we give ourselves permission to do everything with a file, but allow no one else to do anything with it. ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.strong,{children:"[Click for Solution]"})]})]})}),(0,i.jsxs)(n.admonition,{title:"Solution",type:"tip",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ chmod 700 example\n$ ls -l example\n-rwx------  1 yourNetID  users  0 May 30 14:50 example\n"})}),(0,i.jsx)(n.p,{children:"We want all permissions, so: 4 (read) + 2 (write) + 1 (execute) = 7 for user (first position), no permissions, i.e. 0, for group (second position) and other (third position)."})]})]}),"\n",(0,i.jsx)(n.admonition,{title:"Key Points",type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A shell script is just a list of bash commands in a text file."}),"\n",(0,i.jsxs)(n.li,{children:["To make a shell script file executable, run ",(0,i.jsx)(n.code,{children:"chmod +x script.sh"}),"."]}),"\n"]})})]})}function $(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(I,{...e})}):I(e)}},46354:function(e,n,s){s.d(n,{Z:()=>h});var r=s(39546);let i=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),t=e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,(e,n,s)=>s?s.toUpperCase():n.toLowerCase()),o=e=>{let n=t(e);return n.charAt(0).toUpperCase()+n.slice(1)},l=(...e)=>e.filter((e,n,s)=>!!e&&""!==e.trim()&&s.indexOf(e)===n).join(" ").trim(),a=e=>{for(let n in e)if(n.startsWith("aria-")||"role"===n||"title"===n)return!0};var c={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};let d=(0,r.forwardRef)(({color:e="currentColor",size:n=24,strokeWidth:s=2,absoluteStrokeWidth:i,className:t="",children:o,iconNode:d,...h},u)=>(0,r.createElement)("svg",{ref:u,...c,width:n,height:n,stroke:e,strokeWidth:i?24*Number(s)/Number(n):s,className:l("lucide",t),...!o&&!a(h)&&{"aria-hidden":"true"},...h},[...d.map(([e,n])=>(0,r.createElement)(e,n)),...Array.isArray(o)?o:[o]])),h=(e,n)=>{let s=(0,r.forwardRef)(({className:s,...t},a)=>(0,r.createElement)(d,{ref:a,iconNode:n,className:l(`lucide-${i(o(e))}`,`lucide-${e}`,s),...t}));return s.displayName=o(e),s}},89447:function(e,n,s){s.d(n,{Z:()=>l,a:()=>o});var r=s(39546);let i={},t=r.createContext(i);function o(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);